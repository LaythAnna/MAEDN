public class Main {
    

    //Linked Lists ohne Dummy


    public boolean contains(int x){
        for (Node p = begin; p!= null; p = p.next){
            if (p.data == x)
                return true;
            else false;
        }}
    public void add(int x){ //am Ende d. Liste
        if(begin == null);{
        begin = end = new Node(null, x);
        } else {
            end.next = new Node(null, x);
            end = end.next;
        }}
    public List(List l){ //Kosntruktor, der Liste kopiert
        begin = end = null;
        for(Node p = l.begin; p!= null; p = p.next){
            this.add(p.data);
    }}
    public boolean startsWith(list l){
        Node p = this.begin;
        Node q = l.begin;

        while(p != null && q!=null){
            if(p.data != q.data) {return false }
            p = p.next;
            q = q.next;
        }
        if (q == null) {return true;}{
            } else {return false;
        }}
    

        //sortierte linked list mit HK
        public boolean isEmpt(){
            return head.next == null;
        }

        public void insert(T x){
            Node p = head;
            while (p.next != null && p.next.data.compareTo(x) < 0)
                p = p.next;
            p.next = new Node(p.next, x);
        }

        public T delMax(){
            if(head.next ==null)
                throw new NPE();
                T r = head.next.data;
                head.next = head.next.next;
                return t;
        }

        public T distinct(){
            if (head.next == null)
            return;
            Node p = head.next;
            while(p.next != null){
                if (p.data.equals(p.next.data))
                p.next = p.next.next;
                else
                p = p.next;
            }

        }
    }



